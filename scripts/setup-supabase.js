#!/usr/bin/env node

/**
 * Supabase Setup Script
 * 
 * This script helps you set up Supabase environment variables
 * for FlowPay production deployment.
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

async function setupSupabase() {
  console.log('üöÄ FlowPay Supabase Setup');
  console.log('========================\n');
  
  console.log('This script will help you configure Supabase for FlowPay.\n');
  
  console.log('üìã Prerequisites:');
  console.log('1. Create a Supabase project at https://supabase.com');
  console.log('2. Get your project credentials from Settings > API');
  console.log('3. Run the SQL script from SUPABASE_PRODUCTION_SETUP.md\n');
  
  const continueSetup = await question('Do you have a Supabase project ready? (y/n): ');
  
  if (continueSetup.toLowerCase() !== 'y') {
    console.log('\n‚ùå Please create a Supabase project first.');
    console.log('üìñ See SUPABASE_PRODUCTION_SETUP.md for detailed instructions.\n');
    rl.close();
    return;
  }
  
  console.log('\nüìù Enter your Supabase credentials:\n');
  
  const supabaseUrl = await question('Supabase Project URL (https://your-project-id.supabase.co): ');
  const supabaseAnonKey = await question('Supabase Anon Key: ');
  const supabaseServiceKey = await question('Supabase Service Role Key: ');
  
  if (!supabaseUrl || !supabaseAnonKey || !supabaseServiceKey) {
    console.log('\n‚ùå All fields are required. Please try again.\n');
    rl.close();
    return;
  }
  
  // Validate URL format
  if (!supabaseUrl.includes('supabase.co')) {
    console.log('\n‚ö†Ô∏è  Warning: URL should be in format https://your-project-id.supabase.co');
  }
  
  // Validate key format
  if (!supabaseAnonKey.startsWith('eyJ') || !supabaseServiceKey.startsWith('eyJ')) {
    console.log('\n‚ö†Ô∏è  Warning: Keys should start with "eyJ" (JWT format)');
  }
  
  console.log('\nüìù Enter your Flow configuration:\n');
  
  const flowNetwork = await question('Flow Network (mainnet/testnet) [mainnet]: ') || 'mainnet';
  const appUrl = await question('App URL (https://useflowpay.xyz) [https://useflowpay.xyz]: ') || 'https://useflowpay.xyz';
  
  // Create .env.local content
  const envContent = `# FlowPay Environment Variables
# Generated by setup-supabase.js

# ===========================================
# SUPABASE DATABASE
# ===========================================
NEXT_PUBLIC_SUPABASE_URL=${supabaseUrl}
NEXT_PUBLIC_SUPABASE_ANON_KEY=${supabaseAnonKey}
SUPABASE_SERVICE_ROLE_KEY=${supabaseServiceKey}

# ===========================================
# FLOW BLOCKCHAIN
# ===========================================
NEXT_PUBLIC_FLOW_NETWORK=${flowNetwork}
NEXT_PUBLIC_APP_URL=${appUrl}

# ===========================================
# ADMIN CONFIGURATION
# ===========================================
NEXT_PUBLIC_ADMIN_PAYER_ADDRESS=0x...
ADMIN_PAYER_PRIVATE_KEY=xxx...
ADMIN_PAYER_ACCOUNT_INDEX=0
NEXT_PUBLIC_PLATFORM_FEE_RECIPIENT=0x...

# ===========================================
# ADMIN SECURITY
# ===========================================
ADMIN_WALLET_ADDRESS=0x...
ADMIN_SESSION_SECRET=your-admin-session-secret-here
ADMIN_API_KEY=your-admin-api-key-here
NEXT_PUBLIC_ADMIN_DOMAIN=admin.useflowpay.xyz

# ===========================================
# EMAIL CONFIGURATION
# ===========================================
RESEND_API_KEY=your_resend_api_key_here

# ===========================================
# WALLET CONNECT
# ===========================================
NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID=your_walletconnect_project_id
`;

  const envPath = path.join(process.cwd(), '.env.local');
  
  try {
    fs.writeFileSync(envPath, envContent);
    console.log('\n‚úÖ Environment variables saved to .env.local');
    console.log('\nüìã Next steps:');
    console.log('1. Update the admin configuration variables in .env.local');
    console.log('2. Run the SQL script from SUPABASE_PRODUCTION_SETUP.md in your Supabase dashboard');
    console.log('3. Start your development server: npm run dev');
    console.log('4. Test the application at http://localhost:3000');
    console.log('\nüìñ For detailed instructions, see SUPABASE_PRODUCTION_SETUP.md');
  } catch (error) {
    console.log('\n‚ùå Error saving .env.local:', error.message);
  }
  
  rl.close();
}

setupSupabase().catch(console.error);
